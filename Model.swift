import Foundation


struct Model {
    
    var rows: Int = 13
    
    var diceNumber: DiceNumbers = .one
    
    enum coloredFields {
        case greenField
        case yellowField
        case blueField
        case redField
        case whiteField
    }
    
    enum players {
        case green
        case yellow
        case blue
        case red
    }
    
    enum DiceNumbers: Int {
        case one = 1
        case two = 2
        case three = 3
        case four = 4
        case five = 5
        case six = 6
    }
    
    
    var fieldColors: [coloredFields: [(Int, Int)]] = [
        .greenField: [(10, 4), (9, 5), (8, 5), (7, 5),(6,5)],
        .yellowField: [(6, 10), (5, 9), (5, 8), (5, 7), (5,6)],
        .blueField: [(0, 6), (1, 5), (2, 5), (3, 5), (4, 5)],
        .redField: [(4, 0), (5, 1), (5, 2), (5, 3), (5, 4)],
        .whiteField: [(9,4),(8,4),(7,4),(6,4),(6,3),(6,2),(6,1),(6,0),(5,0),(4,1),(4,2),(4,3),(4,4),(3,4),(2,4),(1,4),(0,4),(0,5),(1,6),(2,6),(3,6),(4,6),(4,7),(4,8),(4,9),(4,10),(5,10),(6,9),(6,8),(6,7),(6,6),(7,6),(8,6),(9,6),(10,6),(10,5)]
    ]
    
    var playAbleFieldsInOrder: [players : [(Int, Int)]] = [
        .green:
            [(10,4),(9,4),(8,4),(7,4),(6,4),(6,3),(6,2),(6,1),(6,0),(5,0),(4,0),(4,1),(4,2),(4,3),(4,4),(3,4),(2,4),(1,4),(0,4),(0,5),(0,6),(1,6),(2,6),(3,6),(4,6),(4,7),(4,8),(4,9),(4,10),(5,10),(6, 10),(6,9),(6,8),(6,7),(6,6),(7,6),(8,6),(9,6),(10,6),(10,5)],
        .yellow: [(6,10),(6,9),(6,8),(6,7),(6,6),(7,6),(8,6),(9,6),(10,6),(10,5),(10,4),(9,4),(8,4),(7,4),(6,4),(6,3),(6,2),(6,1),(6,0),(5,0),(4, 0),(4,1),(4,2),(4,3),(4,4),(3,4),(2,4),(1,4),(0,4),(0,5),(0, 6),(1,6),(2,6),(3,6),(4,6),(4,7),(4,8),(4,9),(4,10),(5,10)],
        .blue:
            [(0, 6),(1,6),(2,6),(3,6),(4,6),(4,7),(4,8),(4,9),(4,10),(5,10),(6, 10),(6,9),(6,8),(6,7),(6,6),(7,6),(8,6),(9,6),(10,6),(10,5),(10,4),(9,4),(8,4),(7,4),(6,4),(6,3),(6,2),(6,1),(6,0),(5,0),(4,0),(4,1),(4,2),(4,3),(4,4),(3,4),(2,4),(1,4),(0,4),(0,5)],
        .red:
            [(4,0),(4,1),(4,2),(4,3),(4,4),(3,4),(2,4),(1,4),(0,4),(0,5),(0,6),(1,6),(2,6),(3,6),(4,6),(4,7),(4,8),(4,9),(4,10),(5,10),(6, 10),(6,9),(6,8),(6,7),(6,6),(7,6),(8,6),(9,6),(10,6),(10,5),(10,4),(9,4),(8,4),(7,4),(6,4),(6,3),(6,2),(6,1),(6,0),(5,0)]
    ]
    
    var playerStartPos: [coloredFields: [(Int, Int)]] = [
        .greenField: [(9,0),(9,1),(10, 0), (10, 1)],
        .yellowField: [(10, 10), (10, 9), (9, 10), (9, 9)],
        .blueField: [(0, 9), (0, 10), (1, 9), (1, 10)],
        .redField: [(0, 0), (0, 1), (1, 0), (1, 1)]
    ]
    
    var playerPos: [players: [(Int, Int)]] = [
        .green: [(9,0),(9,1),(10, 0), (10, 1)],
        .yellow: [(10, 10), (10, 9), (9, 10), (9, 9)],
        .blue: [(0, 9), (0, 10), (1, 9), (1, 10)],
        .red: [(0, 0), (0, 1), (1, 0), (1, 1)]
    ]
    
    var dice: (Int, Int) = (5, 5)
    
    mutating func rollDice() -> Int {
        diceNumber = DiceNumbers(rawValue: Int.random(in: 1...6)) ?? .one
        return diceNumber.rawValue
    }
}
